"""enhance_activity_based_billing_with_volume_pricing

Revision ID: 1718f4c8a429
Revises: f14406a7edb8
Create Date: 2025-06-21 09:48:38.034993

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1718f4c8a429'
down_revision: Union[str, None] = 'f14406a7edb8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # First, add new columns with default values
    op.add_column('activitybasedconfig', sa.Column('price_per_unit', sa.Float(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('activity_type', sa.String(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('unit_type', sa.String(), nullable=False, server_default='action'))
    op.add_column('activitybasedconfig', sa.Column('base_agent_fee', sa.Float(), nullable=True, server_default='0.0'))
    op.add_column('activitybasedconfig', sa.Column('volume_pricing_enabled', sa.Boolean(), nullable=True, server_default='false'))
    op.add_column('activitybasedconfig', sa.Column('volume_tier_1_threshold', sa.Integer(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('volume_tier_1_price', sa.Float(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('volume_tier_2_threshold', sa.Integer(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('volume_tier_2_price', sa.Float(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('volume_tier_3_threshold', sa.Integer(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('volume_tier_3_price', sa.Float(), nullable=True))
    op.add_column('activitybasedconfig', sa.Column('minimum_charge', sa.Float(), nullable=True, server_default='0.0'))
    op.add_column('activitybasedconfig', sa.Column('billing_frequency', sa.String(), nullable=False, server_default='monthly'))
    op.add_column('activitybasedconfig', sa.Column('is_active', sa.Boolean(), nullable=True, server_default='true'))
    
    # Migrate existing data from old columns to new columns
    op.execute("""
        UPDATE activitybasedconfig 
        SET 
            price_per_unit = price_per_action,
            activity_type = action_type
        WHERE price_per_action IS NOT NULL AND action_type IS NOT NULL
    """)
    
    # Make the new columns non-nullable where required
    op.alter_column('activitybasedconfig', 'price_per_unit', nullable=False)
    op.alter_column('activitybasedconfig', 'activity_type', nullable=False)
    
    # Drop old columns
    op.drop_column('activitybasedconfig', 'action_type')
    op.drop_column('activitybasedconfig', 'price_per_action')
    
    # Handle index changes
    op.drop_index(op.f('ix_agentbasedconfig_billing_model_id'), table_name='agentbasedconfig')
    op.create_index(op.f('ix_agentbasedconfig_id'), 'agentbasedconfig', ['id'], unique=False)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_agentbasedconfig_id'), table_name='agentbasedconfig')
    op.create_index(op.f('ix_agentbasedconfig_billing_model_id'), 'agentbasedconfig', ['billing_model_id'], unique=False)
    op.add_column('activitybasedconfig', sa.Column('price_per_action', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('activitybasedconfig', sa.Column('action_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('activitybasedconfig', 'is_active')
    op.drop_column('activitybasedconfig', 'billing_frequency')
    op.drop_column('activitybasedconfig', 'minimum_charge')
    op.drop_column('activitybasedconfig', 'volume_tier_3_price')
    op.drop_column('activitybasedconfig', 'volume_tier_3_threshold')
    op.drop_column('activitybasedconfig', 'volume_tier_2_price')
    op.drop_column('activitybasedconfig', 'volume_tier_2_threshold')
    op.drop_column('activitybasedconfig', 'volume_tier_1_price')
    op.drop_column('activitybasedconfig', 'volume_tier_1_threshold')
    op.drop_column('activitybasedconfig', 'volume_pricing_enabled')
    op.drop_column('activitybasedconfig', 'base_agent_fee')
    op.drop_column('activitybasedconfig', 'unit_type')
    op.drop_column('activitybasedconfig', 'activity_type')
    op.drop_column('activitybasedconfig', 'price_per_unit')
    # ### end Alembic commands ###
