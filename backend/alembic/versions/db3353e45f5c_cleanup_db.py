"""Cleanup DB

Revision ID: db3353e45f5c
Revises: c4efdbbf0fb6
Create Date: 2025-07-23 08:17:18.657153

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'db3353e45f5c'
down_revision: Union[str, None] = 'c4efdbbf0fb6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop valuemetric first since it has foreign key to valuereceipt
    op.drop_index(op.f('ix_valuemetric_id'), table_name='valuemetric')
    op.drop_table('valuemetric')
    # Now drop valuereceipt
    op.drop_index(op.f('ix_valuereceipt_id'), table_name='valuereceipt')
    op.drop_table('valuereceipt')
    # Drop humanequivalentbenchmark
    op.drop_index(op.f('ix_humanequivalentbenchmark_id'), table_name='humanequivalentbenchmark')
    op.drop_table('humanequivalentbenchmark')
    op.drop_column('activitybasedconfig', 'human_time_per_unit_minutes')
    op.drop_column('activitybasedconfig', 'human_cost_per_unit')
    op.drop_column('activitybasedconfig', 'human_hourly_rate')
    op.drop_column('activitybasedconfig', 'human_error_rate')
    op.drop_column('activitybasedconfig', 'human_quality_score')
    op.drop_column('activitybasedconfig', 'human_equivalent_value')
    op.drop_column('agentbasedconfig', 'human_fte_productivity_ratio')
    op.drop_column('agentbasedconfig', 'human_onboarding_cost')
    op.drop_column('agentbasedconfig', 'human_overhead_percentage')
    op.drop_column('agentbasedconfig', 'human_fte_monthly_cost')
    op.drop_column('agentbasedconfig', 'human_equivalent_value')
    op.drop_column('billingmodel', 'human_equivalent_value')
    op.drop_column('outcomebasedconfig', 'human_time_to_outcome_days')
    op.drop_column('outcomebasedconfig', 'human_success_rate')
    op.drop_column('outcomebasedconfig', 'human_overhead_multiplier')
    op.drop_column('outcomebasedconfig', 'human_labor_cost_per_hour')
    op.drop_column('outcomebasedconfig', 'human_equivalent_cost_percentage')
    op.drop_column('outcomebasedconfig', 'human_equivalent_value')
    op.drop_column('workflowbasedconfig', 'human_platform_cost_monthly')
    op.drop_column('workflowbasedconfig', 'human_management_hours_per_workflow')
    op.drop_column('workflowbasedconfig', 'human_workflow_overhead_percentage')
    op.drop_column('workflowbasedconfig', 'human_training_cost_per_workflow')
    op.drop_column('workflowbasedconfig', 'human_equivalent_value')
    op.drop_column('workflowtype', 'human_skill_level_required')
    op.drop_column('workflowtype', 'human_error_rate_percentage')
    op.drop_column('workflowtype', 'human_time_per_workflow_hours')
    op.drop_column('workflowtype', 'human_cost_per_workflow')
    op.drop_column('workflowtype', 'human_equivalent_value')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('workflowtype', sa.Column('human_equivalent_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowtype', sa.Column('human_cost_per_workflow', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowtype', sa.Column('human_time_per_workflow_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowtype', sa.Column('human_error_rate_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowtype', sa.Column('human_skill_level_required', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('workflowbasedconfig', sa.Column('human_equivalent_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowbasedconfig', sa.Column('human_training_cost_per_workflow', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowbasedconfig', sa.Column('human_workflow_overhead_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowbasedconfig', sa.Column('human_management_hours_per_workflow', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('workflowbasedconfig', sa.Column('human_platform_cost_monthly', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('outcomebasedconfig', sa.Column('human_equivalent_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('outcomebasedconfig', sa.Column('human_equivalent_cost_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('outcomebasedconfig', sa.Column('human_labor_cost_per_hour', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('outcomebasedconfig', sa.Column('human_overhead_multiplier', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('outcomebasedconfig', sa.Column('human_success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('outcomebasedconfig', sa.Column('human_time_to_outcome_days', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('billingmodel', sa.Column('human_equivalent_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('agentbasedconfig', sa.Column('human_equivalent_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('agentbasedconfig', sa.Column('human_fte_monthly_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('agentbasedconfig', sa.Column('human_overhead_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('agentbasedconfig', sa.Column('human_onboarding_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('agentbasedconfig', sa.Column('human_fte_productivity_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('activitybasedconfig', sa.Column('human_equivalent_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('activitybasedconfig', sa.Column('human_quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('activitybasedconfig', sa.Column('human_error_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('activitybasedconfig', sa.Column('human_hourly_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('activitybasedconfig', sa.Column('human_cost_per_unit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('activitybasedconfig', sa.Column('human_time_per_unit_minutes', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.create_table('valuemetric',
    sa.Column('value_receipt_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metric_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('metric_category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('agent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ai_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('human_equivalent_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('value_generated', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('time_saved_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('quality_improvement_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('speed_improvement_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('human_time_equivalent_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('human_success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ai_success_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('metric_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agent.id'], name=op.f('valuemetric_agent_id_fkey')),
    sa.ForeignKeyConstraint(['value_receipt_id'], ['valuereceipt.id'], name=op.f('valuemetric_value_receipt_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('valuemetric_pkey'))
    )
    op.create_index(op.f('ix_valuemetric_id'), 'valuemetric', ['id'], unique=False)
    op.create_table('humanequivalentbenchmark',
    sa.Column('industry', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('task_category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hourly_rate_min', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('hourly_rate_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('hourly_rate_avg', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('tasks_per_hour', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('error_rate_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('benefits_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('training_cost_per_person', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('onboarding_time_days', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('geographic_region', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('benchmark_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('humanequivalentbenchmark_pkey'))
    )
    op.create_index(op.f('ix_humanequivalentbenchmark_id'), 'humanequivalentbenchmark', ['id'], unique=False)
    op.create_table('valuereceipt',
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('billing_period', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('total_ai_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_human_equivalent_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total_value_generated', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('roi_multiple', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('cost_savings_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('agent_based_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('activity_based_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('outcome_based_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('workflow_based_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('total_time_saved_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_human_fte_equivalent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_efficiency_gain_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('calculation_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], name=op.f('valuereceipt_invoice_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('valuereceipt_pkey'))
    )
    op.create_index(op.f('ix_valuereceipt_id'), 'valuereceipt', ['id'], unique=False)
    # ### end Alembic commands ###
