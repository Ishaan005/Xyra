from sqlalchemy import Column, String, Text, Integer, ForeignKey, Boolean, JSON, DateTime, Float
from sqlalchemy.orm import relationship
from datetime import datetime

from app.models.base import BaseModel

class Agent(BaseModel):
    """
    Agent model for tracking AI agents within an organization
    """
    name = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    organization_id = Column(Integer, ForeignKey("organization.id"), nullable=False)
    billing_model_id = Column(Integer, ForeignKey("billingmodel.id"), nullable=True)
    
    # Agent configuration and metadata
    config = Column(JSON, nullable=True)
    is_active = Column(Boolean, default=True)
    last_active = Column(DateTime, default=datetime.utcnow)
    
    # External ID for the agent in the customer's system
    external_id = Column(String, nullable=True)
    
    # Relationships
    organization = relationship("Organization", back_populates="agents")
    billing_model = relationship("BillingModel", back_populates="agents")
    activities = relationship("AgentActivity", back_populates="agent")
    costs = relationship("AgentCost", back_populates="agent")
    outcomes = relationship("AgentOutcome", back_populates="agent")
    
    def __str__(self) -> str:
        return f"Agent(name={self.name}, org={self.organization_id})"


class AgentActivity(BaseModel):
    """
    Tracks agent activities for activity-based billing
    """
    agent_id = Column(Integer, ForeignKey("agent.id"), nullable=False)
    activity_type = Column(String, nullable=False)  # api_call, query, completion, etc.
    timestamp = Column(DateTime, default=datetime.utcnow)
    metadata = Column(JSON, nullable=True)  # Additional information about the activity
    
    # Relationships
    agent = relationship("Agent", back_populates="activities")
    
    def __str__(self) -> str:
        return f"AgentActivity(agent_id={self.agent_id}, type={self.activity_type})"


class AgentCost(BaseModel):
    """
    Tracks costs associated with agent usage
    """
    agent_id = Column(Integer, ForeignKey("agent.id"), nullable=False)
    cost_type = Column(String, nullable=False)  # compute, api, labor, etc.
    amount = Column(Float, nullable=False)
    currency = Column(String, default="USD")
    timestamp = Column(DateTime, default=datetime.utcnow)
    details = Column(JSON, nullable=True)
    
    # Relationships
    agent = relationship("Agent", back_populates="costs")
    
    def __str__(self) -> str:
        return f"AgentCost(agent_id={self.agent_id}, amount={self.amount})"


class AgentOutcome(BaseModel):
    """
    Tracks outcomes generated by agents for outcome-based billing
    """
    agent_id = Column(Integer, ForeignKey("agent.id"), nullable=False)
    outcome_type = Column(String, nullable=False)  # revenue_uplift, cost_savings, etc.
    value = Column(Float, nullable=False)
    currency = Column(String, default="USD")
    timestamp = Column(DateTime, default=datetime.utcnow)
    details = Column(JSON, nullable=True)
    verified = Column(Boolean, default=False)  # Whether the outcome has been verified
    
    # Relationships
    agent = relationship("Agent", back_populates="outcomes")
    
    def __str__(self) -> str:
        return f"AgentOutcome(agent_id={self.agent_id}, type={self.outcome_type}, value={self.value})"