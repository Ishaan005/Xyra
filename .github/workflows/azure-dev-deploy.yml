name: Build and Deploy Combined App to Azure Dev

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'xyra'
  ACR_NAME: 'xyradevacr'
  CONTAINER_APP_NAME: 'xyra-app-dev'
  CONTAINER_APP_ENV_NAME: 'xyra-dev-ev'
  IMAGE_NAME: 'xyra-app'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Clean up any compiled files that shouldn't be linted
      - name: Clean up dist directories
        run: |
          find . -name "dist" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "Cleaned up dist directories"

      # Python dependency vulnerability scan
      - name: Install pip-audit
        run: pip install pip-audit
      - name: Run pip-audit (backend)
        run: pip-audit -r backend/requirements.txt
      - name: Run pip-audit (xyra_client)
        run: |
          if [ -f xyra_client/requirements.txt ]; then pip-audit -r xyra_client/requirements.txt; fi

      # Python static analysis
      - name: Install bandit
        run: pip install bandit
      - name: Run bandit (backend)
        run: bandit -r backend/app -ll --exit-zero
      - name: Run bandit (xyra_client)
        run: |
          if [ -d xyra_client ]; then bandit -r xyra_client -ll --exit-zero; fi

      # Node.js dependency vulnerability scan
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend && npm ci

      - name: Run npm audit (frontend)
        run: |
          cd frontend && npm audit --audit-level=high --production
        continue-on-error: true

      # Node.js static analysis (eslint)
      - name: Run ESLint (frontend)
        run: |
          cd frontend && npm run lint
        continue-on-error: true
        env:
          NEXT_TELEMETRY_DISABLED: 1

      # Secret scanning
      - name: Run Gitleaks for secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

      - name: Docker Login to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} -f Dockerfile .

      # Container image vulnerability scan
      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push Docker image
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          containerAppEnvironment: ${{ env.CONTAINER_APP_ENV_NAME }}
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
